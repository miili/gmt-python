{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First Steps\n",
    "\n",
    "This is an example of what you can already with GMT/Python. We'll mostly reproduce some examples from the [GMT Tutorial](http://gmt.soest.hawaii.edu/doc/latest/GMT_Tutorial.html#session-one).\n",
    "\n",
    "## Loading the library\n",
    "\n",
    "The GMT modules are available as functions in the `gmt` Python package. See the [API Reference](api.html) for a list of all available functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import gmt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First map\n",
    "\n",
    "To start a new figure in GMT/Python, we need to explicitly call the `gmt.figure` function. \n",
    "After that we can start laying out the map with calls to other functions. \n",
    "\n",
    "For example, lets create a map of Central America."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Start a new figure. \n",
    "gmt.figure()\n",
    "# Create a Mercator map that is 6 inches wide\n",
    "gmt.pscoast(R='-90/-70/0/20', J='M6i', G='chocolate', \n",
    "            S='skyblue', P=True, B='afg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The functions accept the same arguments that the GMT command-line. A general rule is that you can pass in everyting as strings. If an argument has no options (like `-P`), use a `True` value for it.\n",
    "\n",
    "Notice that there is no output redirecting to a PostScript file. This is all thanks to the new GMT [modern mode](http://gmt.soest.hawaii.edu/projects/gmt/wiki/Modernization) that will be part of the future 6.0 release.\n",
    "\n",
    "Unlike the GMT command-line interface, no figure file was generated by this command. You can call `gmt.psconvert` if you want to save a figure. Or you can see the figure directly in the notebook using `gmt.show()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gmt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aliases and conversions\n",
    "\n",
    "GMT/Python defines long-form aliases for the command-line options to make the code more Pythonic and readble. The docstrings of the functions list the possible aliases:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "help(gmt.pscoast)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some options also accept values other than strings. For example, `R` (or `region`) can be passed as a list. This makes it easier to generate such arguments programatically.\n",
    "\n",
    "We can recreate the figure above using the aliases instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calling figure again creates a new figure\n",
    "gmt.figure()\n",
    "gmt.pscoast(region=[-90, -70, 0, 20], projection='M6i', \n",
    "            land='chocolate', water='skyblue', \n",
    "            portrait=True, frame='afg')\n",
    "gmt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A map with sample data\n",
    "\n",
    "GMT ships some sample data that can be accessed using `@data_file`. \n",
    "\n",
    "Lets plot some earthquake epicenters from the `tut_quakes.ngdc` dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gmt.figure()\n",
    "gmt.pscoast(region=[130, 150, 35, 50], projection='M6i', \n",
    "            frame='afg', shorelines=True,\n",
    "            land='gray', water='lightblue',)\n",
    "gmt.psxy(data='@tut_quakes.ngdc', style='c0.3c', \n",
    "         color='blue', pen='faint', i='4,3')\n",
    "gmt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For now, `psxy` can only receive data from files."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
